from quiz_bot import QuizBot
from datetime import datetime, timedelta
import os
import time
import random

def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

def print_header(title):
    clear_screen()
    print("=" * 50)
    print(f"{title:^50}")
    print("=" * 50)

def wait_for_enter():
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

def display_ids(bot):
    print_header("–î–æ—Å—Ç—É–ø–Ω—ã–µ ID –≤ —Å–∏—Å—Ç–µ–º–µ")
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    print("\nüìÅ –ö–ê–¢–ï–ì–û–†–ò–ò:")
    print("-" * 50)
    categories = bot.get_categories()
    if categories:
        for category in categories:
            print(f"ID: {category['id']:<5} | {category['name']}")
    else:
        print("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    # –í–æ–ø—Ä–æ—Å—ã
    print("\n‚ùì –í–û–ü–†–û–°–´:")
    print("-" * 50)
    questions = bot.get_questions()
    if questions:
        for question in questions:
            print(f"ID: {question['id']:<5} | –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {question['category_name']}")
            print(f"     –í–æ–ø—Ä–æ—Å: {question['question_text'][:50]}...")
            print(f"     –û—Ç–≤–µ—Ç: {question['correct_answer']}")
            print("-" * 50)
    else:
        print("–í–æ–ø—Ä–æ—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    # –í–∏–∫—Ç–æ—Ä–∏–Ω—ã
    print("\nüìù –í–ò–ö–¢–û–†–ò–ù–´:")
    print("-" * 50)
    quizzes = bot.get_quizzes()
    if quizzes:
        for quiz in quizzes:
            print(f"ID: {quiz['id']:<5} | {quiz['title']}")
            print(f"     –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {quiz['category_name']}")
            print(f"     –°—Ç–∞—Ç—É—Å: {quiz['status']}")
            print("-" * 50)
    else:
        print("–í–∏–∫—Ç–æ—Ä–∏–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    # –í—Å—Ç—Ä–µ—á–∏
    print("\nüë• –í–°–¢–†–ï–ß–ò:")
    print("-" * 50)
    meetings = bot.get_meetings()
    if meetings:
        for meeting in meetings:
            print(f"ID: {meeting['id']:<5} | –í–∏–∫—Ç–æ—Ä–∏–Ω–∞: {meeting['quiz_title']}")
            print(f"     –£—á–∞—Å—Ç–Ω–∏–∫: {meeting['participant_email']}")
            print(f"     –î–∞—Ç–∞: {meeting['scheduled_time']}")
            print(f"     –°—Ç–∞—Ç—É—Å: {meeting['status']}")
            print("-" * 50)
    else:
        print("–í—Å—Ç—Ä–µ—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    wait_for_enter()

def add_category(bot):
    print_header("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ").strip()
    if name:
        category_id = bot.add_category(name)
        print(f"\n‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å ID: {category_id}")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    wait_for_enter()

def create_question_bank(bot):
    while True:
        print_header("üìö –ë–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤")
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. üìù –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")
        print("2. üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã")
        print("3. üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
        
        if choice == "1":
            print_header("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories = bot.get_categories()
            if not categories:
                print("\n‚ùå –û—à–∏–±–∫–∞: –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
                wait_for_enter()
                continue
            
            print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
            for category in categories:
                print(f"ID: {category['id']:<5} | {category['name']}")
            
            try:
                category_id = int(input("\n–í–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: "))
                if not any(c['id'] == category_id for c in categories):
                    print("\n‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
                    wait_for_enter()
                    continue
                
                question = input("\n–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å: ").strip()
                if not question:
                    print("\n‚ùå –û—à–∏–±–∫–∞: –í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                    wait_for_enter()
                    continue
                
                answer = input("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ").strip()
                if not answer:
                    print("\n‚ùå –û—à–∏–±–∫–∞: –û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                    wait_for_enter()
                    continue
                
                question_id = bot.add_question(category_id, question, answer)
                print(f"\n‚úÖ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å ID: {question_id}")
            except ValueError:
                print("\n‚ùå –û—à–∏–±–∫–∞: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            
            wait_for_enter()
        
        elif choice == "2":
            print_header("–ë–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤")
            questions = bot.get_questions()
            
            if questions:
                for question in questions:
                    print(f"\nID: {question['id']:<5} | –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {question['category_name']}")
                    print(f"–í–æ–ø—Ä–æ—Å: {question['question_text']}")
                    print(f"–û—Ç–≤–µ—Ç: {question['correct_answer']}")
                    print("-" * 50)
            else:
                print("\n‚ùå –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤")
            
            wait_for_enter()
        
        elif choice == "3":
            break
        
        else:
            print("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            time.sleep(1)

def take_quiz(bot):
    print_header("üéØ –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    quizzes = bot.get_quizzes()
    if not quizzes:
        print("\n‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω")
        wait_for_enter()
        return
    
    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:")
    for quiz in quizzes:
        print(f"ID: {quiz['id']:<5} | {quiz['title']} | –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {quiz['category_name']}")
    
    try:
        quiz_id = int(input("\n–í–≤–µ–¥–∏—Ç–µ ID –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: "))
        if not any(q['id'] == quiz_id for q in quizzes):
            print("\n‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã")
            wait_for_enter()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
        questions = bot.get_questions_by_category(quizzes[0]['category_id'])
        if not questions:
            print("\n‚ùå –û—à–∏–±–∫–∞: –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤")
            wait_for_enter()
            return
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
        random.shuffle(questions)
        
        print("\n–ù–∞—á–∏–Ω–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!")
        print("–î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç.")
        print("–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ 'exit'")
        print("-" * 50)
        
        score = 0
        total_questions = len(questions)
        answers = {}
        
        for i, question in enumerate(questions, 1):
            print(f"\n–í–æ–ø—Ä–æ—Å {i}/{total_questions}")
            print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {question['category_name']}")
            print(f"–í–æ–ø—Ä–æ—Å: {question['question_text']}")
            
            answer = input("\n–í–∞—à –æ—Ç–≤–µ—Ç: ").strip()
            if answer.lower() == 'exit':
                break
            
            answers[question['id']] = answer
            
            # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            print(f"\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['correct_answer']}")
            if answer.lower() == question['correct_answer'].lower():
                print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
                score += 1
            else:
                print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            
            wait_for_enter()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print_header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã")
        print(f"\n–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}")
        print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {(score/total_questions)*100:.1f}%")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        meeting_id = bot.create_meeting(quiz_id, 1, "user@example.com", datetime.now())
        bot.submit_answers(meeting_id, answers)
        
        wait_for_enter()
    
    except ValueError:
        print("\n‚ùå –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        wait_for_enter()

def main():
    bot = QuizBot()
    
    while True:
        print_header("Quiz Bot - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. üìö –ë–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤")
        print("2. üéØ –ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")
        print("3. üö™ –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
        
        if choice == "1":
            create_question_bank(bot)
        elif choice == "2":
            take_quiz(bot)
        elif choice == "3":
            print_header("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            time.sleep(1)
            break
        else:
            print("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            time.sleep(1)

if __name__ == "__main__":
    main() 